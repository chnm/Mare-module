<?php
$this->headLink()->appendStylesheet(
    'https://unpkg.com/leaflet@1.6.0/dist/leaflet.css',
    'screen',
    '',
    [
        'integrity' => 'sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ==',
        'crossorigin' => '',
    ]
);
$this->headScript()->appendFile(
    'https://unpkg.com/leaflet@1.6.0/dist/leaflet.js',
    'text/javascript',
    [
        'integrity' => 'sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew==',
        'crossorigin' => '',
    ]
);
$this->headStyle()->appendStyle('
    #map { height: 800px; z-index: 0; }
    #map img { border: none; box-shadow: none; }
    #leaflet-control-default-view {
        border-radius: 4px;
        background-color: #fff;
        width: 26px;
        height: 26px;
        line-height: 26px;
        text-align: center;
        text-decoration: none;
        color: black;
        font: bold 20px "Lucida Console", Monaco, monospace;
        text-indent: 1px;
        cursor: pointer;
        box-shadow: 0 1px 5px rgba(0,0,0,0.65);
    }
');
$countiesJsons = [];
foreach ($countyIds as $countyId) {
    $countiesJsons[$countyId] = $this->assetUrl(sprintf('js/counties_1926/%s.json', $countyId), 'Mare');
}
?>
<?php echo $this->pageTitle('Map of Schedules', 2); ?>
<p>Click on a state and then a county to see the schedules available in a particular location. If many schedules are available, you can then use the "browse all" link to see every schedule in that location.</p>
<p>We recommend that our visually impaired and blind users explore the schedules through our text-based (<a href="https://omeka.religiousecologies.org/s/census-1926/item?resource_template_id%5B0%5D=5">query builder</a> or <a href="https://omeka.religiousecologies.org/s/census-1926/page/denominations">denomination</a> and <a href="https://omeka.religiousecologies.org/s/census-1926/page/locations">location</a> filtered views.</p>
<label id="denomination-select-label">Filter by denomination <?php echo $this->formSelect($denominationSelect); ?></label>
<div id="map"
    data-states-json="<?php echo $this->escapeHtml($this->assetUrl('js/states_1926.json', 'Mare')); ?>"
    data-counties-jsons="<?php echo $this->escapeHtml(json_encode($countiesJsons)); ?>"
></div>

<script>
const denominationSelect = document.getElementById('denomination-select');
const mapDiv = document.getElementById('map')
const map = L.map(mapDiv).setView([39.833333, -98.583333], 5);
const tileLayer = L.tileLayer(
    'https://server.arcgisonline.com/ArcGIS/rest/services/World_Shaded_Relief/MapServer/tile/{z}/{y}/{x}',
    {minZoom: 3, maxZoom: 10, attribution: '{attribution.Esri} &mdash; Source: Esri'}
).addTo(map);
const countiesJsons = JSON.parse(mapDiv.dataset.countiesJsons);
let countiesLayer;
let cachedCounties = [];
initMap();

denominationSelect.addEventListener('change', e => {
    cachedCounties = [];
});

async function initMap() {
    let response = await fetch(mapDiv.dataset.statesJson);
    let json = await response.json();
    L.geoJSON(json, {
        style: function(feature) {
            return {weight: 2, color: 'grey', fillColor: 'grey'};
        },
        onEachFeature: function(stateFeature, stateLayer) {
            stateLayer.bindTooltip(stateFeature.properties.name);
            stateLayer.addEventListener('mouseover', function(e) {
                stateLayer.setStyle({color: 'grey', fillColor: 'blue'});
            });
            stateLayer.addEventListener('mouseout', function(e) {
                stateLayer.setStyle({color: 'grey', fillColor: 'grey'});
            });
            stateLayer.addEventListener('click', function(e) {
                stateOnClick(stateFeature, stateLayer)
            });
        }
    }).addTo(map);
}

async function stateOnClick(stateFeature, stateLayer) {
    map.fitBounds(stateLayer.getBounds());
    let response = await fetch(countiesJsons[stateFeature.id]);
    let json = await response.json();
    if (map.hasLayer(countiesLayer)) {
        map.removeLayer(countiesLayer);
        cachedCounties = [];
    }
    countiesLayer = L.geoJSON(json, {
        style: function(feature) {
            return {weight: 2, color: 'grey', fillColor: 'grey'};
        },
        onEachFeature: function(countyFeature, countyLayer) {
            countyLayer.bindTooltip(`${countyFeature.properties.name}, ${countyFeature.properties.state_terr}`);
            countyLayer.addEventListener('mouseover', function(e) {
                countyLayer.setStyle({color: 'grey', fillColor: 'blue'});
            });
            countyLayer.addEventListener('mouseout', function(e) {
                countyLayer.setStyle({color: 'grey', fillColor: 'grey'});
            });
            countyLayer.addEventListener('click', function(e) {
                countyOnClick(countyFeature, countyLayer);
            });
        }
    });
    countiesLayer.addTo(map);
}

async function countyOnClick(countyFeature, countyLayer) {
    if (cachedCounties.includes(countyFeature.id)) {
        return;
    }
    let popupDiv = document.createElement('div');
    let popupHeading = document.createElement('h4');
    popupDiv.appendChild(popupHeading);
    popupHeading.innerHTML = `${countyFeature.properties.name}, ${countyFeature.properties.state_terr}`;
    let popupLoading = document.createElement('span');
    popupDiv.appendChild(popupLoading);
    popupLoading.innerHTML = 'Loading...';
    countyLayer.bindPopup(popupDiv, { maxWidth : 500 });
    countyLayer.openPopup();
    let searchParams = {
        'resource_class_id[]': '111',
        'property[0][joiner]': 'and',
        'property[0][property]': '196',
        'property[0][type]': 'eq',
        'property[0][text]': countyFeature.id,
        'per_page': 10,
    };
    if (denominationSelect.value) {
        searchParams = {
            ...searchParams,
            'property[1][joiner]': 'and',
            'property[1][property]': '202',
            'property[1][type]': 'eq',
            'property[1][text]': denominationSelect.value,
        };
    }
    let urlSearchParams = new URLSearchParams(searchParams);
    let response = await fetch(`https://omeka.religiousecologies.org/api/items?${urlSearchParams.toString()}`);
    let json = await response.json();
    popupLoading.remove();
    if (json.length) {
        let popupUl = document.createElement('ul');
        popupDiv.appendChild(popupUl);
        json.forEach(function(obj) {
            let popupLi = document.createElement('li');
            popupUl.appendChild(popupLi);
            let popupItemLink = document.createElement('a');
            popupLi.appendChild(popupItemLink);
            popupItemLink.href = `https://omeka.religiousecologies.org/s/census-1926/item/${obj['o:id']}`;
            popupItemLink.innerHTML = obj['o:title'];
            popupItemLink.target = '_blank';
        });
        let popupBrowseLink = document.createElement('a');
        popupDiv.appendChild(popupBrowseLink);
        popupBrowseLink.href = `https://omeka.religiousecologies.org/s/census-1926/item?${urlSearchParams.toString()}`;
        popupBrowseLink.innerHTML = 'Browse all';
        popupBrowseLink.target = '_blank';
    } else {
        let popupNoneFound = document.createElement('span');
        popupDiv.appendChild(popupNoneFound);
        popupNoneFound.innerHTML = 'No schedules found';
    }
    cachedCounties.push(countyFeature.id);
}

L.Control.DefaultViewControl = L.Control.extend({
    options: {'position': 'topleft'},
    onAdd: map => {
        const link = L.DomUtil.create('a');
        link.id = 'leaflet-control-default-view';
        link.href = '#';
        link.title = 'Default view';
        link.innerHTML = 'â–¡';
        link.setAttribute('role', 'button');
        link.setAttribute('aria-label', 'Default view');
        L.DomEvent.disableClickPropagation(link);
        L.DomEvent.on(link, 'click', e => {
            e.preventDefault();
            map.setView([39.833333, -98.583333], 5);
        });
        return link;
    }
});
const defaultViewControl = new L.Control.DefaultViewControl();
defaultViewControl.addTo(map);
</script>

